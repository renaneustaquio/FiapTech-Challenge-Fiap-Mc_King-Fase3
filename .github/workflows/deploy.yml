name: pipeline
on:
  push:
    branches:
      - master
      - develop
      - release

jobs:
  Teste_Unitario:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Run All Tests
        run: |
          for proj in CasosDeUsos.Tests Entidades.Tests InterfaceAdapters.Tests Infra.Tests; do
            echo "Restoring $proj..."
            dotnet restore $proj
            echo "Running tests for $proj..."
            dotnet test $proj --no-restore --verbosity normal
          done

  SonarQube:
    runs-on: windows-latest
    needs: Teste_Unitario
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Sonar Scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: sonar-scanner-${{ runner.os }}

      - name: Install Sonar Scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool install dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"mayaramanziFiap_Tech-Challenge-Fiap-Mc_King_Fase3" /o:"mayaramanzifiap" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build 9soat-g63-mc-king.sln
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  Publica_Image:
    runs-on: ubuntu-latest
    needs: SonarQube
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore, Build e Publish
        run: |
          dotnet restore 9soat-g63-mc-king.sln
          dotnet build --configuration Release 9soat-g63-mc-king.sln
          dotnet publish --configuration Release -o ./publish 9soat-g63-mc-king.sln

      - name: Docker Login - GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.actor }}/mckingapi:latest -f ./API/Dockerfile .

      - name: Push Docker Image (only on master)
        run: |
          docker push ghcr.io/${{ github.actor }}/mckingapi:latest

      - name: Make GHCR Image Public (only on master)
        if: github.ref == 'refs/heads/master'
        run: |
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"visibility": "public"}' \
            https://api.github.com/user/packages/container/${{ github.repository }}/ghcr.io/${{ github.repository }}/mckingapi/versions/latest

  Deploy-EKS:
    runs-on: ubuntu-latest
    needs: Publica_Image
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup kubeconfig EKS
        run: aws eks update-kubeconfig --name mcking-cluster --region us-east-1

      - name: Atualizar imagem no EKS
        run: |
          kubectl set image deployment/mckingapi-deployment  mckingapi-container=ghcr.io/${{ github.actor }}/mckingapi:latest --namespace=default

      - name: Verificar rollout do deploy
        run: kubectl rollout status deployment/mckingapi-deployment --namespace=default